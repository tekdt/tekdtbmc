#include <GUIConstantsEx.au3>
#include <WindowsConstants.au3>
#include <StaticConstants.au3>
#include <WinAPI.au3>
#include <Array.au3>
#include <File.au3>
#include <ButtonConstants.au3>
#include <GDIPlus.au3>
#include <Math.au3>
#include <WinAPIFiles.au3>
#include <WinAPIHObj.au3>
#include <WinAPISys.au3>
#include <Memory.au3>

Opt("WinTitleMatchMode", 2)

If ProcessList("TekDTMenu64.exe")[0][0] > 1 OR ProcessList("TekDTMenu32.exe")[0][0] > 1 Then
	MsgBox(16,'Th√¥ng b√°o',"Ch∆∞∆°ng tr√¨nh ƒë√£ ƒëang ch·∫°y")
	Exit
EndIf

; --- C√†i ƒë·∫∑t v√† Bi·∫øn to√†n c·ª•c ---
Global Const $g_sIniFile = @ScriptDir & "\TekDTMenu.ini"
Global $g_sTitle = IniRead($g_sIniFile, "Settings", "Title", "TekDT BMC")
Global $g_iMainWidth = _Scale(260)
Global $g_iMaxButtonsVisible = 5 ; S·ªë n√∫t t·ªëi ƒëa hi·ªÉn th·ªã c√πng l√∫c
Global $g_iButtonHeight = _Scale(50)
Global $g_iTitleHeight = _Scale(40)
Global $g_iFooterHeight = _Scale(20)
Global $g_iMainHeight = $g_iTitleHeight ; S·∫Ω ƒë∆∞·ª£c t√≠nh to√°n l·∫°i sau
Global $g_iShrinkSize = _Scale(50)
Global $g_iTransparency = 230 ; ƒê·ªô trong su·ªët (0-255)

Global $g_aButtons_All[0][8] ; M·∫£ng ch·ª©a T·∫§T C·∫¢ c√°c n√∫t t·ª´ INI
Global $g_hGUI, $g_hShrinkLabel, $hTitleBar, $hTitleText, $g_hFooterLabel
Global $g_hScrollUp, $g_hScrollDown
Global $g_iScrollOffset = 0 ; V·ªã tr√≠ cu·ªôn hi·ªán t·∫°i (index c·ªßa n√∫t ƒë·∫ßu ti√™n)

Global $g_bIsShrunken = False
Global $g_bIsAnimating = False
Global $g_bMouseOver = False
Global $g_bDragging = False
Global $g_iDragOffsetX, $g_iDragOffsetY

; --- M√†u s·∫Øc (lo·∫°i b·ªè k√™nh alpha ƒë·ªÉ t∆∞∆°ng th√≠ch WinPE) ---
Global $g_iButtonHoverColor = 0x00C0FF ; M√†u xanh khi r√™ chu·ªôt
Global $g_iTextColor = 0xFFFFFF ; M√†u tr·∫Øng
Global $g_iTitleBarColor = 0x0070C0 ; M√†u xanh d∆∞∆°ng ƒë·∫≠m cho title bar

; M·∫£ng m√†u pastel (ho√†n to√†n kh√¥ng trong su·ªët)
Global $aPastelColors = [0xFFD700, 0xFF6347, 0x98FB98, 0xDDA0DD, 0xAFEEEE, 0xF0E68C, 0xFFB6C1, 0xE6E6FA]

_Main()

Func _Main()
	_WaitForWinPEBootComplete()
	_ReadButtonsInfoFromINI()
    _CreateGUI()
	_CreateButtons()
    _UpdateVisibleButtons() ; Hi·ªÉn th·ªã c√°c n√∫t ban ƒë·∫ßu
    GUISetState(@SW_SHOW, $g_hGUI)

	_RunAutoRunButtons() ; Ch·∫°y c√°c button AutoRun

    AdlibRegister("_CheckMousePosition", 100)
    AdlibRegister("_InitialShrink", 2000) ; Thu nh·ªè sau 2 gi√¢y

	Local $iLastCheck = TimerInit()

    While 1
        Local $iMsg = GUIGetMsg()
		If $iMsg = 0 Then ContinueLoop
        Switch $iMsg
            ; ƒê√£ lo·∫°i b·ªè Case $GUI_EVENT_CLOSE ƒë·ªÉ kh√¥ng th·ªÉ t·∫Øt
            Case $g_hScrollUp
                _Scroll(-1)
            Case $g_hScrollDown
                _Scroll(1)
            Case Else
                ; X·ª≠ l√Ω s·ª± ki·ªán cho c√°c n√∫t ch·ª©c nƒÉng
                For $i = 0 To UBound($g_aButtons_All) - 1
                    If $iMsg = $g_aButtons_All[$i][0] Then
                        _HandleButtonPress($iMsg)
                        ExitLoop
                    EndIf
                Next
        EndSwitch

        If $g_bDragging Then
            Local $aMousePos = MouseGetPos()
            WinMove($g_hGUI, "", $aMousePos[0] - $g_iDragOffsetX, $aMousePos[1] - $g_iDragOffsetY)
        EndIf

		If TimerDiff($iLastCheck) > 1000 Then
			_CheckFocus()
			$iLastCheck = TimerInit()
		EndIf
    WEnd
    Exit
EndFunc

; --- C√°c h√†m kh·ªüi t·∫°o v√† giao di·ªán ---

Func _CreateGUI()
    Local $iTotalButtons = UBound($g_aButtons_All)
    Local $iVisibleButtons = _Min($iTotalButtons, $g_iMaxButtonsVisible)
    $g_iMainHeight = $g_iTitleHeight + ($iVisibleButtons * $g_iButtonHeight)
    If $iTotalButtons > $iVisibleButtons Then $g_iMainHeight += $g_iFooterHeight

	Local $iScrollAreaHeight = 0
    If $iTotalButtons > $iVisibleButtons Then
        $iScrollAreaHeight = _Scale(30)
        $g_iMainHeight += $g_iFooterHeight + $iScrollAreaHeight
    EndIf

    ConsoleWrite("Creating GUI: Width=" & $g_iMainWidth & ", Height=" & $g_iMainHeight & ", TotalButtons=" & $iTotalButtons & ", VisibleButtons=" & $iVisibleButtons & @CRLF)

    $g_hGUI = GUICreate($g_sTitle, $g_iMainWidth, $g_iMainHeight, 0, 0, $WS_POPUP, BitOR($WS_EX_TOPMOST, $WS_EX_WINDOWEDGE))
    GUISetBkColor(0xFFFFFF)

	If @OSVersion = "WIN_7" Or @OSVersion = "WIN_8" Or @OSVersion = "WIN_81" Or @OSVersion = "WIN_10" Or @OSVersion = "WIN_11" Then
		_GDIPlus_Startup()
		GUISetBkColor(0xABCDEF) ; M√†u n·ªÅn t·∫°m ƒë·ªÉ t·∫°o trong su·ªët
		_WinAPI_SetLayeredWindowAttributes($g_hGUI, 0xABCDEF, $g_iTransparency)
	EndIf

    ; T·∫°o c√°c ƒëi·ªÅu khi·ªÉn kh√°c tr∆∞·ªõc
    $g_hShrinkLabel = GUICtrlCreateLabel("üîß", 0, 0, $g_iShrinkSize, $g_iShrinkSize, BitOR($SS_CENTER, $SS_CENTERIMAGE))
	GUICtrlSetFont(-1, _Scale(30), 800, 0, "Segoe UI Symbol")
	GUICtrlSetColor(-1, $g_iTextColor)
	GUICtrlSetBkColor(-1, $g_iTitleBarColor)
	GUICtrlSetState(-1, $GUI_HIDE)
	GUICtrlSetCursor(-1, 9)

	; Ki·ªÉm tra xem bi·ªÉu t∆∞·ª£ng c·ªù l√™ c√≥ hi·ªÉn th·ªã ƒë√∫ng kh√¥ng
	Local $sTestLabel = GUICtrlCreateLabel("üîß", -100, -100, 10, 10) ; T·∫°o label ·∫©n ƒë·ªÉ ki·ªÉm tra
	Local $sFontName = _WinAPI_GetFontName(GUICtrlGetHandle($sTestLabel))
	GUICtrlDelete($sTestLabel)
	If $sFontName <> "Segoe UI Symbol" Then
		GUICtrlSetData($g_hShrinkLabel, "W") ; Fallback n·∫øu kh√¥ng h·ªó tr·ª£ c·ªù l√™
		GUICtrlSetFont($g_hShrinkLabel, _Scale(24), 800, 0, "Segoe UI")
	EndIf

	; T·∫°o n√∫t cu·ªôn l√™n/xu·ªëng (thay cho thanh cu·ªôn d·ªçc)
    If $iTotalButtons > $iVisibleButtons Then
	Local $iScrollY = $g_iMainHeight - $g_iFooterHeight - $iScrollAreaHeight
		; $g_hScrollUp = GUICtrlCreateLabel("‚ñ≤", $g_iMainWidth - _Scale(30), $g_iMainHeight - $g_iFooterHeight - _Scale(50), _Scale(25), _Scale(25), $SS_CENTER)
		$g_hScrollUp = GUICtrlCreateLabel("‚ñ≤", _Scale(5), $iScrollY + _Scale(2.5), _Scale(25), _Scale(25), $SS_CENTER)
		$g_hScrollDown = GUICtrlCreateLabel("‚ñº", $g_iMainWidth - _Scale(30), $g_iMainHeight - $g_iFooterHeight - _Scale(25), _Scale(25), _Scale(25), $SS_CENTER)
		GUICtrlSetFont($g_hScrollUp, _Scale(12), 600, 0, "Segoe UI")
		GUICtrlSetFont($g_hScrollDown, _Scale(12), 600, 0, "Segoe UI")
		GUICtrlSetColor($g_hScrollUp, 0x000000)
		GUICtrlSetColor($g_hScrollDown, 0x000000)
		GUICtrlSetBkColor($g_hScrollUp, 0xCCCCCC)
		GUICtrlSetBkColor($g_hScrollDown, 0xCCCCCC)
		GUICtrlSetCursor($g_hScrollUp, 0)
		GUICtrlSetCursor($g_hScrollDown, 0)
	EndIf

    ; T·∫°o d√≤ng ch·ªØ ch√∫ th√≠ch n·∫øu c·∫ßn
    If $iTotalButtons > $iVisibleButtons Then
        $g_hFooterLabel = GUICtrlCreateLabel("Cu·ªôn ƒë·ªÉ xem th√™m", 0, $g_iMainHeight - $g_iFooterHeight, $g_iMainWidth, $g_iFooterHeight, $SS_CENTER)
        GUICtrlSetFont(-1, _Scale(8), 400, 0, "Segoe UI")
        GUICtrlSetColor(-1, 0x000000)
        GUICtrlSetBkColor(-1, 0xF0F0F0)
    EndIf

    ; T·∫°o title bar v√† text sau c√πng ƒë·ªÉ tr√°nh che khu·∫•t
    $hTitleBar = GUICtrlCreateLabel("", 0, 0, $g_iMainWidth, $g_iTitleHeight)
    GUICtrlSetBkColor(-1, $g_iTitleBarColor)
    GUICtrlSetState(-1, $GUI_DROPACCEPTED)
    GUICtrlSetCursor(-1, 9)

    $hTitleText = GUICtrlCreateLabel($g_sTitle, 0, 0, $g_iMainWidth, $g_iTitleHeight, $SS_CENTER)
    GUICtrlSetBkColor(-1, $GUI_BKCOLOR_TRANSPARENT)
    GUICtrlSetFont(-1, _Scale(11), 600, 0, "Segoe UI")
    GUICtrlSetColor(-1, $g_iTextColor)

    ; ƒê·∫£m b·∫£o GUI ·ªü tr·∫°ng th√°i m·ªü r·ªông
    $g_bIsShrunken = False
    _UpdateVisibleButtons() ; G·ªçi l·∫°i ƒë·ªÉ hi·ªÉn th·ªã n√∫t

    GUIRegisterMsg($WM_LBUTTONDOWN, "_WM_LBUTTONDOWN")
    GUIRegisterMsg($WM_LBUTTONUP, "_WM_LBUTTONUP")
    GUIRegisterMsg($WM_MOUSEWHEEL, "_WM_MOUSEWHEEL")
EndFunc

Func _ReadButtonsInfoFromINI()
    Local $iButtonIndex = 1
    Local $iColorIndex = 0

    While 1
        Local $sSection = "Button" & $iButtonIndex
        Local $sText = _IniReadUTF8($g_sIniFile, $sSection, "Text", "")
        If $sText = "" Then ExitLoop

        Local $sAction = _IniReadUTF8($g_sIniFile, $sSection, "Action", "")
        Local $sTooltip = _IniReadUTF8($g_sIniFile, $sSection, "Tooltip", "")
        Local $bWait = StringToBool(_IniReadUTF8($g_sIniFile, $sSection, "Wait", "False"))
		Local $bAutoRun = StringToBool(_IniReadUTF8($g_sIniFile, $sSection, "AutoRun", "False"))

        Local $iIndex = UBound($g_aButtons_All)
        ReDim $g_aButtons_All[$iIndex + 1][8] ; [0]:ID, [1]:Text, [2]:Action, [3]:Wait, [4]:Running, [5]:Color, [6]:Tooltip, [7]:AutoRun

        $g_aButtons_All[$iIndex][1] = $sText
        $g_aButtons_All[$iIndex][2] = $sAction
        $g_aButtons_All[$iIndex][3] = $bWait
        $g_aButtons_All[$iIndex][5] = $aPastelColors[$iColorIndex]
        $g_aButtons_All[$iIndex][6] = $sTooltip
		$g_aButtons_All[$iIndex][7] = $bAutoRun ; L∆∞u tr·∫°ng th√°i AutoRun

        $iButtonIndex += 1
        $iColorIndex = Mod($iColorIndex + 1, UBound($aPastelColors))
    WEnd
EndFunc

Func _CreateButtons()
    Local $iButtonWidth = $g_iMainWidth - _Scale(10)
    Local $iButtonX = _Scale(5)

    For $i = 0 To UBound($g_aButtons_All) - 1
        Local $yPos = $g_iTitleHeight + ($i * $g_iButtonHeight) ; V·ªã tr√≠ t·∫°m th·ªùi

        ; T·∫°o control th·ª±c s·ª±
        $g_aButtons_All[$i][0] = GUICtrlCreateLabel( _
            $g_aButtons_All[$i][1], _
            $iButtonX, _
            $yPos, _
            $iButtonWidth, _
            $g_iButtonHeight - _Scale(10), _
            BitOR($SS_CENTER, $SS_CENTERIMAGE) _
        )

        ; Thi·∫øt l·∫≠p thu·ªôc t√≠nh
        GUICtrlSetFont(-1, _Scale(10), 600, 0, "Segoe UI")
        GUICtrlSetTip(-1, $g_aButtons_All[$i][6])
        GUICtrlSetBkColor(-1, $g_aButtons_All[$i][5])
        GUICtrlSetColor(-1, 0x000000)
        GUICtrlSetCursor(-1, 0)
        GUICtrlSetState(-1, $GUI_HIDE)
    Next
EndFunc

; --- C√°c h√†m x·ª≠ l√Ω s·ª± ki·ªán ---

Func _HandleButtonPress($iCtrlID)
    For $i = 0 To UBound($g_aButtons_All) - 1
        If $g_aButtons_All[$i][0] = $iCtrlID Then
            If $g_aButtons_All[$i][4] Then Return ; N·∫øu ƒëang ch·∫°y th√¨ kh√¥ng l√†m g√¨

            _SetButtonState($iCtrlID, True) ; Chuy·ªÉn sang tr·∫°ng th√°i "ƒêang th·ª±c hi·ªán..."

            Local $sAction = $g_aButtons_All[$i][2]
            Local $bWait = $g_aButtons_All[$i][3]

			; Ki·ªÉm tra action h·ª£p l·ªá
            If $sAction = "" Then
                _SetButtonState($iCtrlID, False)
                Return
            EndIf

            Switch $sAction
                Case "ANALYZE_PARTITIONS"
                    _AnalyzePartitions()
                Case "AUTO_CLEAN_PARTITIONS"
                    _AutoCleanPartitions()
				Case Else
                    _RunTool($sAction)
            EndSwitch

            If Not $bWait Then Sleep(500)
            _SetButtonState($iCtrlID, False) ; Tr·∫£ v·ªÅ tr·∫°ng th√°i b√¨nh th∆∞·ªùng
            Return
        EndIf
    Next
EndFunc

Func _SetButtonState($hButton, $bIsLoading)
    For $i = 0 To UBound($g_aButtons_All) - 1
        If $g_aButtons_All[$i][0] = $hButton Then
            If $bIsLoading Then
                GUICtrlSetData($hButton, "ƒêang th·ª±c hi·ªán...")
                GUICtrlSetBkColor($hButton, $g_iButtonHoverColor)
                $g_aButtons_All[$i][4] = True
            Else
                GUICtrlSetData($hButton, $g_aButtons_All[$i][1])
                GUICtrlSetBkColor($hButton, $g_aButtons_All[$i][5]) ; Tr·∫£ v·ªÅ m√†u pastel g·ªëc
                $g_aButtons_All[$i][4] = False
            EndIf
            ExitLoop
        EndIf
    Next
EndFunc

Func _CheckMousePosition()
    Local $aMPos = MouseGetPos()
    Local $aWinPos = WinGetPos($g_hGUI)
    If Not IsArray($aWinPos) Then Return

    Local $bOver = ($aMPos[0] >= $aWinPos[0] And $aMPos[0] <= $aWinPos[0] + $aWinPos[2] And _
            $aMPos[1] >= $aWinPos[1] And $aMPos[1] <= $aWinPos[1] + $aWinPos[3])

    If $bOver And Not $g_bMouseOver Then
        $g_bMouseOver = True
        If $g_bIsShrunken Then _AnimateGUI("expand")
    ElseIf Not $bOver And $g_bMouseOver Then
        $g_bMouseOver = False
        If Not $g_bIsShrunken Then _AnimateGUI("shrink")
    EndIf
EndFunc

Func _WM_MOUSEWHEEL($hWnd, $iMsg, $wParam, $lParam)
    Local $iDelta = BitShift($wParam, 16) / 120
    If $iDelta > 0 Then
        _Scroll(-1) ; Cu·ªôn l√™n
    Else
        _Scroll(1)  ; Cu·ªôn xu·ªëng
    EndIf
    Return $GUI_RUNDEFMSG
EndFunc

; --- C√°c h√†m ti·ªán √≠ch ---

Func _RunTool($sTool)
    If $sTool = "" Then
        ConsoleWrite("Error: Empty tool path in _RunTool" & @CRLF)
        Return
    EndIf

    ; X·ª≠ l√Ω c√°c l·ªánh ƒë·∫∑c bi·ªát (gi·ªØ nguy√™n)
    Switch StringLower($sTool)
        Case "cmd", "command", "commandprompt"
            Run(@ComSpec & " /k echo C√¥ng c·ª• Command Prompt", "", @SW_SHOW)
            Return
        Case "powershell"
            Run("powershell.exe", "", @SW_SHOW)
            Return
        Case "explorer", "fileexplorer"
            Run("explorer.exe", "", @SW_SHOW)
            Return
    EndSwitch

    ; X·ª≠ l√Ω l·ªánh shutdown v·ªõi x√°c nh·∫≠n (gi·ªØ nguy√™n)
    If StringInStr($sTool, "wpeutil.exe") Then
        Local $sMsg = StringInStr($sTool, "reboot") ? "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën kh·ªüi ƒë·ªông l·∫°i m√°y t√≠nh?" : "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·∫Øt m√°y t√≠nh?"
        If MsgBox(36, "X√°c Nh·∫≠n", $sMsg) = 6 Then ; 6 = Yes
            Run(@ComSpec & " /c " & $sTool, "", @SW_HIDE)
        EndIf
        Return
    EndIf

    ; Thay th·∫ø %ScriptDir% v√† %ARCH% (gi·ªØ nguy√™n)
    $sTool = StringReplace($sTool, "%ScriptDir%", @ScriptDir)
    $sTool = StringReplace($sTool, "%ARCH%", @OSArch = "X64" ? "64" : "32")

    ; T√°ch ƒë∆∞·ªùng d·∫´n ch√≠nh v√† tham s·ªë (gi·ªØ nguy√™n)
    Local $sExePath, $sParams = ""
    If StringLeft($sTool, 1) = '"' Then
        Local $iEndQuote = StringInStr($sTool, '"', 0, 2)
        If $iEndQuote Then
            $sExePath = StringMid($sTool, 2, $iEndQuote - 2)
            $sParams = StringTrimLeft($sTool, $iEndQuote)
        EndIf
    Else
        Local $iFirstSpace = StringInStr($sTool, " ")
        If $iFirstSpace Then
            $sExePath = StringLeft($sTool, $iFirstSpace - 1)
            $sParams = StringTrimLeft($sTool, $iFirstSpace)
        Else
            $sExePath = $sTool
        EndIf
    EndIf

    ; N·∫øu file th·ª±c thi ch∆∞a t·ªìn t·∫°i, h√£y th·ª≠ gi·∫£i n√©n
    If Not FileExists($sExePath) Then
        ; L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c c·ªßa file exe m·ª•c ti√™u
		Local $ExeFile_Drive, $ExeFile_Dir, $ExeFile_FileName, $ExeFile_Extension
        Local $sTargetDir = StringTrimRight(_PathSplit($sExePath, $ExeFile_Drive, $ExeFile_Dir, $ExeFile_FileName, $ExeFile_Extension)[1]&_PathSplit($sExePath, $ExeFile_Drive, $ExeFile_Dir, $ExeFile_FileName, $ExeFile_Extension)[2],1)

        ; T√¨m c√°c file .7z trong th∆∞ m·ª•c ƒë√≥
        Local $aArchives = _FileListToArray($sTargetDir, "*.7z")
        If Not @error And $aArchives[0] > 0 Then
            ; X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n t·ªõi 7za.exe d·ª±a tr√™n ki·∫øn tr√∫c h·ªá th·ªëng
            Local $s7zPath = @ScriptDir & "\Tools\7z" & (@OSArch = "X64" ? "64" : "32") & "\7za.exe"

            If FileExists($s7zPath) Then
                ConsoleWrite("Attempting to extract archives in: " & $sTargetDir & @CRLF)
                ; L·∫∑p qua t·ª´ng file .7z t√¨m th·∫•y v√† gi·∫£i n√©n
                For $i = 1 To $aArchives[0]
                    Local $sArchivePath = $sTargetDir & "\" & $aArchives[$i]
                    ; L·ªánh gi·∫£i n√©n: x (gi·∫£i n√©n v·ªõi ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß), -o (ch·ªâ ƒë·ªãnh th∆∞ m·ª•c ƒë·∫ßu ra), -y (t·ª± ƒë·ªông ƒë·ªìng √Ω)
                    Local $sCommand = '"' & $s7zPath & '" x "' & $sArchivePath & '" -o"' & $sTargetDir & '" -y'
                    RunWait($sCommand, "", @SW_HIDE)
                Next
            Else
                MsgBox(16, "L·ªói", "Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• gi·∫£i n√©n:" & @CRLF & $s7zPath)
            EndIf
        EndIf
    EndIf

    ; Ki·ªÉm tra v√† ch·∫°y t·ªáp th·ª±c thi (gi·ªØ nguy√™n logic c≈©, nh∆∞ng b√¢y gi·ªù n√≥ s·∫Ω ki·ªÉm tra l·∫°i sau khi ƒë√£ gi·∫£i n√©n)
    If FileExists($sExePath) Then
        Run('"' & $sExePath & '" ' & $sParams, "", @SW_SHOW)
    Else
        ; Th·ª≠ t√¨m trong System32 n·∫øu kh√¥ng ph·∫£i ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi
        Local $sSystemPath = @WindowsDir & "\System32\" & $sTool
        If FileExists($sSystemPath) Then
            Run($sSystemPath, $sParams, @SW_SHOW)
        Else
            MsgBox(16, "L·ªói", "Kh√¥ng t√¨m th·∫•y t·ªáp: " & @CRLF & $sExePath & @CRLF & "Vui l√≤ng ki·ªÉm tra th∆∞ m·ª•c Tools trong th∆∞ m·ª•c ch·ª©a script.")
        EndIf
    EndIf
EndFunc

Func _RunAutoRunButtons()
    For $i = 0 To UBound($g_aButtons_All) - 1
        If $g_aButtons_All[$i][7] Then ; N·∫øu AutoRun=True
            ; B·∫Øt ch∆∞·ªõc click button
            _HandleButtonPress($g_aButtons_All[$i][0])
        EndIf
    Next
EndFunc

Func _CheckFocus()
    Local $hActive = WinGetHandle("[ACTIVE]")
    If $hActive <> $g_hGUI And Not $g_bIsShrunken Then
        _AnimateGUI("shrink")
    EndIf
EndFunc

Func _IniReadUTF8($sFile, $sSection, $sKey, $sDefault)
    Local $sValue = IniRead($sFile, $sSection, $sKey, $sDefault)
    If $sValue = $sDefault Then
        ConsoleWrite("IniRead: Section=" & $sSection & ", Key=" & $sKey & ", Value=" & $sValue & " (default)" & @CRLF)
        Return $sValue
    EndIf
    Local $sConverted = BinaryToString(StringToBinary($sValue, 1), 4) ; ANSI sang Unicode
    ConsoleWrite("IniRead: Section=" & $sSection & ", Key=" & $sKey & ", Original=" & $sValue & ", Converted=" & $sConverted & @CRLF)
    Return $sConverted
EndFunc

Func _Scale($iValue, $sAxis = "y")
    Local $fScale
    If $sAxis = "y" Then
        $fScale = @DesktopHeight / 1080
    Else
        $fScale = @DesktopWidth / 1920
    EndIf
    Local $iScaledValue = Round($iValue * $fScale)
    ConsoleWrite("Scaling: Input=" & $iValue & ", Axis=" & $sAxis & ", ScaleFactor=" & $fScale & ", Output=" & $iScaledValue & @CRLF)
    Return $iScaledValue
EndFunc

Func StringToBool($sString)
    Return StringLower($sString) = "true"
EndFunc

Func _AnalyzePartitions()
    Local $sTempDir = @TempDir
    Local $sScriptFile = $sTempDir & "\listdisk.txt"
    Local $sOutputFile = $sTempDir & "\disklist.txt"

    ; T·∫°o script ƒë·ªÉ l·∫•y danh s√°ch disk
    Local $hFile = FileOpen($sScriptFile, 2)
    FileWriteLine($hFile, "list disk")
    FileWriteLine($hFile, "exit")
    FileClose($hFile)

    ; Ch·∫°y diskpart v√† l∆∞u k·∫øt qu·∫£
	RunWait(@ComSpec & ' /c diskpart /s "' & $sScriptFile & '" > "' & $sOutputFile & '"', "", @SW_HIDE)

    ; ƒê·ªçc danh s√°ch disk
    Local $aLines = FileReadToArray($sOutputFile)
    If @error Then
        MsgBox(16, "L·ªói", "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·ªï ƒëƒ©a.")
        FileDelete($sScriptFile)
        FileDelete($sOutputFile)
        Return
    EndIf

    Local $aDisks[0]
    For $sLine In $aLines
        Local $aMatch = StringRegExp($sLine, "Disk\s+(\d+)", 1)
        If Not @error Then
            _ArrayAdd($aDisks, $aMatch[0])
        EndIf
    Next

    Local $sMsg = "C√°c ph√¢n v√πng hi·ªán c√≥ (theo Disk/Partition):" & @CRLF & @CRLF
    For $sDiskNum In $aDisks
        Local $sPartScriptFile = $sTempDir & "\listpart" & $sDiskNum & ".txt"
        Local $sPartOutputFile = $sTempDir & "\partitions" & $sDiskNum & ".txt"

        ; T·∫°o script ƒë·ªÉ l·∫•y danh s√°ch partition c·ªßa disk
        Local $hFile = FileOpen($sPartScriptFile, 2)
        FileWriteLine($hFile, "select disk " & $sDiskNum)
        FileWriteLine($hFile, "list partition")
        FileWriteLine($hFile, "exit")
        FileClose($hFile)

        ; Ch·∫°y diskpart v√† l∆∞u k·∫øt qu·∫£
		RunWait(@ComSpec & ' /c diskpart /s "' & $sPartScriptFile & '" > "' & $sPartOutputFile & '"', "", @SW_HIDE)

        ; ƒê·ªçc v√† ph√¢n t√≠ch danh s√°ch partition
        Local $aPartLines = FileReadToArray($sPartOutputFile)
        If @error Then
            $sMsg &= "Disk " & $sDiskNum & ": Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√¢n v√πng." & @CRLF & @CRLF
            ContinueLoop
        EndIf

        $sMsg &= "Disk " & $sDiskNum & ":" & @CRLF
        For $sLine In $aPartLines
			Local $aMatch = StringRegExp($sLine, "Partition\s+(\d+)\s+([^\d]+?)\s+(\d+)\s*([KMGTP]?B)", 3)
			If Not @error Then
				Local $sPartNum = $aMatch[0]
				Local $sType = StringStripWS($aMatch[1], 3)  ; X√≥a kho·∫£ng tr·∫Øng th·ª´a
				Local $iSizeValue = Number($aMatch[2])
				Local $sUnit = $aMatch[3]
				Local $iSizeMB = 0

				; S·ª¨A ƒê·ªîI: Quy ƒë·ªïi dung l∆∞·ª£ng v·ªÅ MB ƒë·ªÉ ki·ªÉm tra th·ªëng nh·∫•t
				Switch $sUnit
					Case "GB"
						$iSizeMB = $iSizeValue * 1024
					Case "TB"
						$iSizeMB = $iSizeValue * 1024 * 1024
					Case "MB"
						$iSizeMB = $iSizeValue
					Case "KB"
						$iSizeMB = $iSizeValue / 1024
					Case Else
						$iSizeMB = $iSizeValue / (1024 * 1024) ; Cho B
				EndSwitch

			Local $sNotes = ""
			Local $bIsBitLocker = False
			Local $bFoundBitLocker = False

                ; Ki·ªÉm tra BitLocker tr∆∞·ªõc khi ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán kh√°c
                If $iSizeMB > 100 Then ; Ch·ªâ ki·ªÉm tra ph√¢n v√πng ƒë·ªß l·ªõn
                    $bIsBitLocker = _CheckBitLockerMetadata($sDiskNum, $sPartNum)
                    If $bIsBitLocker Then
                        $sNotes &= " üîí BITLOCKER ƒê√É B·∫¨T!"
                        $bFoundBitLocker = True
                    EndIf
                EndIf

				; Ki·ªÉm tra c√°c lo·∫°i ph√¢n v√πng ƒë·∫∑c bi·ªát
				If $iSizeMB < 1000 Then $sNotes &= " ‚ö†Ô∏è Nh·ªè (<1GB)"
				If StringRegExp($sType, "(?i)Recovery|EFI|MSR|System") Then $sNotes &= " ‚ö†Ô∏è H·ªá th·ªëng"

				; Ph√¢n t√≠ch s√¢u h∆°n cho c√°c ph√¢n v√πng d·ªØ li·ªáu c∆° b·∫£n (Primary/Basic)
				If StringRegExp($sType, "(?i)Primary|Basic") Then
					Local $bIsWin = _IsWindowsPartition($sDiskNum, $sPartNum)
					If $bIsWin Then
						 $sNotes &= " üíª C√≥ th·ªÉ l√† Windows c≈©!"
					Else
						$sNotes &= " üë§ D·ªØ li·ªáu ng∆∞·ªùi d√πng?"
					EndIf
				EndIf

				$sMsg &= "  Partition " & $sPartNum & " (" & $sType & ", " & $iSizeValue & " " & $sUnit & ")" & $sNotes & @CRLF
			EndIf
		Next
        $sMsg &= @CRLF
    Next

    ; Th√™m c·∫£nh b√°o ƒë·∫∑c bi·ªát n·∫øu ph√°t hi·ªán BitLocker
    If $bFoundBitLocker Then
        $sMsg &= @CRLF & "--- C·∫¢NH B√ÅO QUAN TR·ªåNG ---" & @CRLF
        $sMsg &= "üîí Ph√°t hi·ªán ph√¢n v√πng ƒë∆∞·ª£c m√£ h√≥a BitLocker!" & @CRLF
        $sMsg &= "N·∫øu b·∫°n c√†i ƒë·∫∑t Windows l√™n ph√¢n v√πng n√†y m√† kh√¥ng m·ªü kh√≥a tr∆∞·ªõc," & @CRLF
        $sMsg &= "T·∫§T C·∫¢ D·ªÆ LI·ªÜU S·∫º B·ªä M·∫§T Vƒ®NH VI·ªÑN!" & @CRLF & @CRLF
        $sMsg &= "üëâ H√ÉY: M·ªü kh√≥a BitLocker tr∆∞·ªõc khi ti·∫øp t·ª•c, ho·∫∑c sao l∆∞u d·ªØ li·ªáu!" & @CRLF
    EndIf

    $sMsg &= "--- Ch√∫ th√≠ch ---" & @CRLF
    $sMsg &= "üíª Windows c≈©: Ph√°t hi·ªán c√≥ th∆∞ m·ª•c h·ªá th·ªëng (Windows, Program Files)." & @CRLF
    $sMsg &= "üë§ D·ªØ li·ªáu ng∆∞·ªùi d√πng: Ph√¢n v√πng d·ªØ li·ªáu." & @CRLF
    $sMsg &= "‚ö†Ô∏è H·ªá th·ªëng: Ph√¢n v√πng EFI, Recovery... quan tr·ªçng cho vi·ªác kh·ªüi ƒë·ªông." & @CRLF & @CRLF
    $sMsg &= "üëâ KHUY·∫æN C√ÅO: KH√îNG XO√Å c√°c ph√¢n v√πng c√≥ k√Ω hi·ªáu üíª, üë§, ‚ö†Ô∏è n·∫øu kh√¥ng ch·∫Øc ch·∫Øn!"
    MsgBox(64, "Ph√¢n T√≠ch Ph√¢n V√πng", $sMsg)

    ; X√≥a file t·∫°m
    FileDelete($sScriptFile)
    FileDelete($sOutputFile)
    For $sDiskNum In $aDisks
        FileDelete($sTempDir & "\listpart" & $sDiskNum & ".txt")
        FileDelete($sTempDir & "\partitions" & $sDiskNum & ".txt")
    Next
EndFunc

Func _AutoCleanPartitions()
    ; B∆∞·ªõc 1: X√°c nh·∫≠n ban ƒë·∫ßu
    Local $iConfirm = MsgBox(36, "C·∫£nh B√°o N√¢ng Cao", "T√≠nh nƒÉng n√†y s·∫Ω t·ª± ƒë·ªông xo√° c√°c ph√¢n v√πng:" & @CRLF & _
        "- Ph√¢n v√πng nh·ªè (<1GB)" & @CRLF & _
        "- Ph√¢n v√πng h·ªá th·ªëng (Recovery, MSR...)" & @CRLF & _
        "- Ph√¢n v√πng ch·ª©a Windows c≈©" & @CRLF & @CRLF & _
        "B·∫†N C√ì CH·∫ÆC CH·∫ÆN MU·ªêN TI·∫æP T·ª§C KH√îNG?")
    If $iConfirm <> 6 Then Return ; 6 = Yes

    ; B∆∞·ªõc 2: Ph√¢n t√≠ch disk v√† partition
    Local $sTempDir = @TempDir
    Local $sScriptFile = $sTempDir & "\listdisk.txt"
    Local $sOutputFile = $sTempDir & "\disklist.txt"
    ; T·∫°o script ƒë·ªÉ l·∫•y danh s√°ch disk
    Local $hFile = FileOpen($sScriptFile, 2)
    FileWriteLine($hFile, "list disk")
    FileWriteLine($hFile, "exit")
    FileClose($hFile)

    ; Ch·∫°y diskpart v√† l∆∞u k·∫øt qu·∫£
    RunWait(@ComSpec & ' /c diskpart /s "' & $sScriptFile & '" > "' & $sOutputFile & '"', "", @SW_HIDE)

    ; ƒê·ªçc danh s√°ch disk
    Local $aLines = FileReadToArray($sOutputFile)
    If @error Then
        MsgBox(16, "L·ªói", "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ·ªï ƒëƒ©a.")
        FileDelete($sScriptFile)
        FileDelete($sOutputFile)
        Return
    EndIf

    Local $aDisks[0]
    For $sLine In $aLines
        Local $aMatch = StringRegExp($sLine, "Disk\s+(\d+)", 1)
        If Not @error Then
            _ArrayAdd($aDisks, $aMatch[0])
        EndIf
    Next

    Local $sCleanScriptFile = $sTempDir & "\cleanpart.txt"
    $hFile = FileOpen($sCleanScriptFile, 2)

    ; B∆∞·ªõc 3: Thu th·∫≠p th√¥ng tin ph√¢n v√πng s·∫Ω x√≥a
    Local $aToDelete[0][5] ; [Disk, Partition, Type, Size, Reason]
    Local $sMsg = "C√°c ph√¢n v√πng sau s·∫Ω b·ªã x√≥a:" & @CRLF & @CRLF

    For $sDiskNum In $aDisks
        Local $sPartScriptFile = $sTempDir & "\listpart" & $sDiskNum & ".txt"
        Local $sPartOutputFile = $sTempDir & "\partitions" & $sDiskNum & ".txt"

        ; T·∫°o script ƒë·ªÉ l·∫•y danh s√°ch partition c·ªßa disk
        Local $hPartFile = FileOpen($sPartScriptFile, 2)
        FileWriteLine($hPartFile, "select disk " & $sDiskNum)
        FileWriteLine($hPartFile, "list partition")
        FileWriteLine($hPartFile, "exit")
        FileClose($hPartFile)

        ; Ch·∫°y diskpart v√† l∆∞u k·∫øt qu·∫£
        RunWait(@ComSpec & ' /c diskpart /s "' & $sPartScriptFile & '" > "' & $sPartOutputFile & '"', "", @SW_HIDE)

        ; ƒê·ªçc v√† ph√¢n t√≠ch danh s√°ch partition
        Local $aPartLines = FileReadToArray($sPartOutputFile)
        If @error Then
            $sMsg &= "Disk " & $sDiskNum & ": Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√¢n v√πng." & @CRLF & @CRLF
            ContinueLoop
        EndIf

        For $sLine In $aPartLines
            Local $sPartNum = ""
            Local $sType = ""
            Local $iSizeValue = 0
            Local $sUnit = ""
            Local $iSizeMB = 0
            Local $aMatch = StringRegExp($sLine, "Partition\s+(\d+)\s+([^\d]+?)\s+(\d+)\s*([KMGTP]?B)", 3)
            If Not @error Then
                Local $sPartNum = $aMatch[0]
                Local $sType = StringStripWS($aMatch[1], 3)  ; X√≥a kho·∫£ng tr·∫Øng th·ª´a
                Local $iSizeValue = Number($aMatch[2])
                Local $sUnit = $aMatch[3]
                Local $iSizeMB = 0

                ; Quy ƒë·ªïi dung l∆∞·ª£ng v·ªÅ MB
                Switch $sUnit
                    Case "GB"
                        $iSizeMB = $iSizeValue * 1024
                    Case "TB"
                        $iSizeMB = $iSizeValue * 1024 * 1024
                    Case "MB"
                        $iSizeMB = $iSizeValue
                    Case "KB"
                        $iSizeMB = $iSizeValue / 1024
                    Case Else
                        $iSizeMB = $iSizeValue / (1024 * 1024) ; Cho B
                EndSwitch
				; Ki·ªÉm tra ƒëi·ªÅu ki·ªán x√≥a
				Local $bIsSmall = False
				If $iSizeMB < 1000 Then $bIsSmall = True
				Local $bIsSystem = StringRegExp($sType, "(?i)Recovery|EFI|MSR|System")
				Local $bIsPrimaryBasic = StringRegExp($sType, "(?i)Primary|Basic")
				Local $bIsOldWindows = _IsWindowsPartition($sDiskNum, $sPartNum)

				Local $sReason = ""
				Local $bShouldDelete = False

				If $bIsOldWindows Then
					$sReason = "Ch·ª©a h·ªá ƒëi·ªÅu h√†nh c≈©"
					$bShouldDelete = True
				ElseIf ($bIsSmall Or $bIsSystem) And Not $bIsPrimaryBasic Then
					; $sReason = $bIsSmall ? "Kh√¥ng c·∫ßn thi·∫øt s·∫Ω ƒë∆∞·ª£c t·ª± t·∫°o l·∫°i khi c√†i ƒë·∫∑t Windows m·ªõi" : "H·ªá th·ªëng"
					If $bIsSmall Then
						$sReason = "Kh√¥ng c·∫ßn thi·∫øt s·∫Ω ƒë∆∞·ª£c t·ª± t·∫°o l·∫°i khi c√†i ƒë·∫∑t Windows m·ªõi"
					Else
						$sReason = "H·ªá th·ªëng"
					EndIf
					$bShouldDelete = True
				EndIf

				If $bShouldDelete Then
					; Th√™m v√†o danh s√°ch x√≥a v√† th√¥ng b√°o
					Local $iIdx = UBound($aToDelete)
					ReDim $aToDelete[$iIdx + 1][5]
					$aToDelete[$iIdx][0] = $sDiskNum
					$aToDelete[$iIdx][1] = $sPartNum
					$aToDelete[$iIdx][2] = $sType
					$aToDelete[$iIdx][3] = $iSizeValue & " " & $sUnit
					$aToDelete[$iIdx][4] = $sReason

					$sMsg &= StringFormat("- Disk %s, Partition %s: %s (%s) - L√Ω do: %s", _
						$sDiskNum, $sPartNum, $sType, $iSizeValue & " " & $sUnit, $sReason) & @CRLF
				EndIf
			EndIf
        Next
    Next

    ; B∆∞·ªõc 4: X√°c nh·∫≠n l·∫ßn 2 v·ªõi danh s√°ch chi ti·∫øt
    If UBound($aToDelete) > 0 Then
        $sMsg &= @CRLF & "B·∫†N C√ì CH·∫ÆC CH·∫ÆN MU·ªêN X√ìA C√ÅC PH√ÇN V√ôNG TR√äN?"
        $iConfirm = MsgBox(52, "X√ÅC NH·∫¨N L·∫¶N CU·ªêI", $sMsg) ; 52 = Yes/No + Question icon
        If $iConfirm <> 6 Then Return
    Else
        MsgBox(64, "Th√¥ng b√°o", "Kh√¥ng t√¨m th·∫•y ph√¢n v√πng n√†o ƒë·ªÉ x√≥a t·ª± ƒë·ªông")
        Return
    EndIf

    ; B∆∞·ªõc 5: Th·ª±c hi·ªán x√≥a
    Local $sCleanScriptFile = $sTempDir & "\cleanpart.txt"
    Local $hFile = FileOpen($sCleanScriptFile, 2)

    For $i = 0 To UBound($aToDelete) - 1
        FileWriteLine($hFile, "select disk " & $aToDelete[$i][0])
        FileWriteLine($hFile, "select partition " & $aToDelete[$i][1])
        FileWriteLine($hFile, "delete partition override")
    Next

    FileClose($hFile)
    RunWait('diskpart /s "' & $sCleanScriptFile & '"', "", @SW_HIDE)
    MsgBox(64, "Ho√†n T·∫•t", "ƒê√£ xo√° " & UBound($aToDelete) & " ph√¢n v√πng")
	If WinExists("Setup","") Then
		ControlClick("Setup","","[CLASS:Button; INSTANCE:1]")
		ControlSend("Setup","","[CLASS:Button; INSTANCE:1]","!r")

    ; X√≥a file t·∫°m
    FileDelete($sScriptFile)
    FileDelete($sOutputFile)
    FileDelete($sCleanScriptFile)
    For $sDiskNum In $aDisks
        FileDelete($sTempDir & "\listpart" & $sDiskNum & ".txt")
        FileDelete($sTempDir & "\partitions" & $sDiskNum & ".txt")
    Next
EndFunc

;===============================================================================
; H√†m: _IsWindowsPartition
; M·ª•c ƒë√≠ch: Ki·ªÉm tra xem m·ªôt ph√¢n v√πng c√≥ ch·ª©a h·ªá ƒëi·ªÅu h√†nh Windows hay kh√¥ng
;           b·∫±ng c√°ch t·∫°m th·ªùi g√°n k√Ω t·ª± v√† ki·ªÉm tra c√°c t·ªáp/th∆∞ m·ª•c h·ªá th·ªëng.
; Tham s·ªë:
;    $iDiskNum  - Ch·ªâ s·ªë c·ªßa ·ªï ƒëƒ©a.
;    $iPartNum  - Ch·ªâ s·ªë c·ªßa ph√¢n v√πng tr√™n ·ªï ƒëƒ©a ƒë√≥.
; Tr·∫£ v·ªÅ:
;    True      - N·∫øu c√≥ v·∫ª l√† ph√¢n v√πng Windows.
;    False     - N·∫øu kh√¥ng ph·∫£i ho·∫∑c c√≥ l·ªói.
;===============================================================================
Func _IsWindowsPartition($iDiskNum, $iPartNum)
    Local $sTempDir = @TempDir
    Local $sExistingLetter = ""
    Local $sDetailScript = $sTempDir & "\detail_part.txt"
    Local $sDetailOutput = $sTempDir & "\detail_part_out.txt"
	Local $bIsBootPartition = False ; Bi·∫øn ƒë·ªÉ ƒë√°nh d·∫•u ph√¢n v√πng kh·ªüi ƒë·ªông
	; T·∫°o script ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt ph√¢n v√πng
    Local $hFile = FileOpen($sDetailScript, 2)
    FileWriteLine($hFile, "select disk " & $iDiskNum)
    FileWriteLine($hFile, "select partition " & $iPartNum)
    FileWriteLine($hFile, "detail partition")
    FileWriteLine($hFile, "exit")
    FileClose($hFile)
    RunWait(@ComSpec & ' /c diskpart /s "' & $sDetailScript & '" > "' & $sDetailOutput & '"', "", @SW_HIDE)

    Local $aLines = FileReadToArray($sDetailOutput)
    FileDelete($sDetailScript)
    FileDelete($sDetailOutput)

    ; If Not @error Then
        ; For $sLine In $aLines
            ; ; T√¨m d√≤ng c√≥ d·∫°ng "Volume ###  Ltr  ..."
            ; Local $aMatch = StringRegExp($sLine, '(?i)Volume\s+\d+\s+([A-Z])\s+', 1)
            ; If Not @error Then
                ; $sExistingLetter = $aMatch[0]
                ; ExitLoop
            ; EndIf
        ; Next
    ; EndIf
	If Not @error Then
        For $sLine In $aLines
            ; T√¨m d√≤ng c√≥ d·∫°ng "Volume ### Ltr Label Fs Type Size Status Info"
            Local $aMatchVolume = StringRegExp($sLine, '(?i)Volume\s+\d+\s+([A-Z]?)\s+.*?(\s+Boot)?$', 1)
            If Not @error Then
                If UBound($aMatchVolume) > 0 Then
                    $sExistingLetter = StringStripWS($aMatchVolume[0], 3) ; L·∫•y k√Ω t·ª± ·ªï ƒëƒ©a (n·∫øu c√≥)
                EndIf
                If UBound($aMatchVolume) > 1 And StringStripWS($aMatchVolume[1], 3) = "Boot" Then
                    $bIsBootPartition = True ; ƒê·∫∑t c·ªù n·∫øu t√¨m th·∫•y "Boot" trong c·ªôt Info
                EndIf
                ; N·∫øu ƒë√£ t√¨m th·∫•y c·∫£ k√Ω t·ª± v√† th√¥ng tin Boot, c√≥ th·ªÉ tho√°t s·ªõm
                If $sExistingLetter <> "" And $bIsBootPartition Then ExitLoop
            EndIf
        Next
    EndIf

    ; N·∫øu ph√¢n v√πng ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† "Boot", th√¨ ƒë√¢y g·∫ßn nh∆∞ ch·∫Øc ch·∫Øn l√† ph√¢n v√πng Windows
    If $bIsBootPartition Then
        ConsoleWrite("Disk " & $iDiskNum & ", Partition " & $iPartNum & " identified as BOOT partition." & @CRLF)
        Return True
    EndIf

    ; =================================================================================

    ; N·∫øu ƒë√£ c√≥ k√Ω t·ª±, ch·ªâ c·∫ßn ki·ªÉm tra tr·ª±c ti·∫øp
    If $sExistingLetter <> "" Then
        Return _CheckWindowsFiles($sExistingLetter)
    EndIf

    ; N·∫øu kh√¥ng c√≥ k√Ω t·ª± (tr∆∞·ªùng h·ª£p trong WinPE), th·ª±c hi·ªán g√°n t·∫°m th·ªùi nh∆∞ c≈©
    Local $sDriveLetter = ""
    For $i = 90 To 68 Step -1 ; Z -> D
        $sDriveLetter = Chr($i)
        If DriveStatus($sDriveLetter & ":\") = 'INVALID' Then ExitLoop
        $sDriveLetter = ""
    Next

    If $sDriveLetter = "" Then
        ConsoleWrite("Error: Kh√¥ng t√¨m th·∫•y k√Ω t·ª± ·ªï ƒëƒ©a tr·ªëng ƒë·ªÉ ki·ªÉm tra ph√¢n v√πng." & @CRLF)
        Return False
    EndIf

    Local $sAssignScript = $sTempDir & "\assign_letter.txt"
    $hFile = FileOpen($sAssignScript, 2)
    FileWriteLine($hFile, "select disk " & $iDiskNum)
    FileWriteLine($hFile, "select partition " & $iPartNum)
    FileWriteLine($hFile, "assign letter=" & $sDriveLetter)
    FileWriteLine($hFile, "exit")
    FileClose($hFile)
    RunWait(@ComSpec & ' /c diskpart /s "' & $sAssignScript & '"', "", @SW_HIDE)
    FileDelete($sAssignScript)
    Local $hTimer = TimerInit()
    While Not FileExists($sDriveLetter & ":\")
        If TimerDiff($hTimer) > 5000 Then ExitLoop ; Ch·ªù t·ªëi ƒëa 5 gi√¢y
        Sleep(250)
    WEnd
	; Ki·ªÉm tra chuy√™n s√¢u
    Local $bIsWindows = _CheckWindowsFiles($sDriveLetter)

    Local $sRemoveScript = $sTempDir & "\remove_letter.txt"
    $hFile = FileOpen($sRemoveScript, 2)
    FileWriteLine($hFile, "select disk " & $iDiskNum)
    FileWriteLine($hFile, "select partition " & $iPartNum)
    FileWriteLine($hFile, "remove letter=" & $sDriveLetter)
    FileWriteLine($hFile, "exit")
    FileClose($hFile)
    RunWait(@ComSpec & ' /c diskpart /s "' & $sRemoveScript & '"', "", @SW_HIDE)
    FileDelete($sRemoveScript)

    Return $bIsWindows
EndFunc

;===============================================================================
; H√†m ki·ªÉm tra chuy√™n s√¢u cho Windows
;===============================================================================
Func _CheckWindowsFiles($sDriveLetter)
    ; ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n c√≥ d·∫°ng "X:"
    $sDriveLetter = StringUpper(StringLeft($sDriveLetter, 2))
    If StringRight($sDriveLetter, 1) <> ":" Then $sDriveLetter &= ":"

    ; Ki·ªÉm tra s·ª± t·ªìn t·∫°i c·ªßa th∆∞ m·ª•c "Windows" v√† "Program Files"
    If Not FileExists($sDriveLetter & "\Windows") Then Return False
    If Not FileExists($sDriveLetter & "\Program Files") Then Return False

    ; Ki·ªÉm tra c√°c t·ªáp h·ªá th·ªëng quan tr·ªçng
    Local $aCriticalFiles = [ _
        $sDriveLetter & "\Windows\System32\ntoskrnl.exe", _
        $sDriveLetter & "\Windows\System32\kernel32.dll", _
        $sDriveLetter & "\Windows\System32\user32.dll", _
        $sDriveLetter & "\Windows\System32\winload.efi", _
        $sDriveLetter & "\Windows\System32\cmd.exe" _
    ]

    Local $iFound = 0
    For $sFile In $aCriticalFiles
        If FileExists($sFile) Then $iFound += 1
    Next

    ; Y√™u c·∫ßu c√≥ th∆∞ m·ª•c Windows v√† √≠t nh·∫•t 2 t·ªáp h·ªá th·ªëng quan tr·ªçng
    Return $iFound >= 2
EndFunc

Func _WaitForWinPEBootComplete()
    ; Ch·ªù t·ªëi ƒëa 10 gi√¢y cho ti·∫øn tr√¨nh explorer.exe ho·∫∑c setup.exe xu·∫•t hi·ªán
    Local $hTimer = TimerInit()
    While Not ProcessExists("explorer.exe") = 1 OR ProcessExists("setup.exe") = 1 OR WinExists('Setup') = 1
        If TimerDiff($hTimer) > 5000 Then
            ConsoleWrite("Wait for explorer.exe or setup.exe timeout, proceeding anyway..." & @CRLF)
            ExitLoop
        EndIf
        Sleep(500)
    WEnd
    ConsoleWrite("WinPE explorer.exe or setup.exe detected. Proceeding..." & @CRLF)

    ; Ch·ªù th√™m m·ªôt ch√∫t ƒë·ªÉ c√°c th√†nh ph·∫ßn giao di·ªán ·ªïn ƒë·ªãnh
    Sleep(1000)
EndFunc

Func ServiceExists($sServiceName)
    Local $aServices = _Service_List()
    If Not @error Then
        For $i = 1 To $aServices[0][0]
            If $aServices[$i][0] = $sServiceName Then Return True
        Next
    EndIf
    Return False
EndFunc

; H√†m ki·ªÉm tra BitLocker qua metadata sector
Func _CheckBitLockerMetadata($iDiskNum, $iPartNum)
    Local $hDisk = _WinAPI_CreateFile("\\.\PhysicalDrive" & $iDiskNum, 2, 6, 6)
    If $hDisk = -1 Then
        ConsoleWrite("Kh√¥ng th·ªÉ m·ªü PhysicalDrive" & $iDiskNum & ". Th·ª≠ ph∆∞∆°ng ph√°p kh√°c." & @CRLF)
        Return _CheckBitLockerViaDiskpart($iDiskNum, $iPartNum)
    EndIf

    Local $tBuffer = DllStructCreate("byte[512]")
    Local $iBytesRead = 0
    
    ; ƒê·ªçc sector ƒë·∫ßu ti√™n c·ªßa partition
    _WinAPI_SetFilePointer($hDisk, 512 * _GetPartitionStartSector($iDiskNum, $iPartNum))
    Local $bSuccess = _WinAPI_ReadFile($hDisk, DllStructGetPtr($tBuffer), 512, $iBytesRead)
    _WinAPI_CloseHandle($hDisk)
    
    If Not $bSuccess Or $iBytesRead <> 512 Then
        ConsoleWrite("ƒê·ªçc sector th·∫•t b·∫°i. Th·ª≠ qua diskpart." & @CRLF)
        Return _CheckBitLockerViaDiskpart($iDiskNum, $iPartNum)
    EndIf

    Local $sData = BinaryToString(DllStructGetData($tBuffer, 1))
    Return (StringInStr($sData, "-FVE-FS") > 0)
EndFunc

; H√†m d·ª± ph√≤ng ki·ªÉm tra BitLocker qua diskpart
Func _CheckBitLockerViaDiskpart($iDiskNum, $iPartNum)
    Local $sTempFile = @TempDir & "\sector_dump_" & $iDiskNum & "_" & $iPartNum & ".bin"
    Local $sScript = @TempDir & "\read_sector.txt"
    
    ; T·∫°o script diskpart
    FileWrite($sScript, "select disk " & $iDiskNum & @CRLF & _
                      "select partition " & $iPartNum & @CRLF & _
                      "dump sector 0 1 """ & $sTempFile & """" & @CRLF & _
                      "exit")
    
    ; Ch·∫°y diskpart
    RunWait('diskpart /s "' & $sScript & '"', "", @SW_HIDE)
    
    ; Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i v√† c√≥ d·ªØ li·ªáu
    If Not FileExists($sTempFile) Or FileGetSize($sTempFile) < 512 Then
        FileDelete($sScript)
        Return False
    EndIf
    
    Local $hFile = FileOpen($sTempFile, 16)
    Local $sData = FileRead($hFile, 512)
    FileClose($hFile)
    
    ; D·ªçn d·∫πp
    FileDelete($sScript)
    FileDelete($sTempFile)
    
    Return (StringInStr($sData, "-FVE-FS") > 0)
EndFunc

; H√†m h·ªó tr·ª£ l·∫•y sector b·∫Øt ƒë·∫ßu c·ªßa partition
Func _GetPartitionStartSector($iDiskNum, $iPartNum)
    Local $sOutput = "", $sScript = @TempDir & "\get_offset.txt"
    
    FileWrite($sScript, "select disk " & $iDiskNum & @CRLF & _
                      "select partition " & $iPartNum & @CRLF & _
                      "detail partition" & @CRLF & _
                      "exit")
    
    RunWait('diskpart /s "' & $sScript & '" > "' & @TempDir & '"\part_info.txt"', "", @SW_HIDE)
    $sOutput = FileRead(@TempDir & "\part_info.txt")
    FileDelete($sScript)
    FileDelete(@TempDir & "\part_info.txt")
    
    Local $aMatches = StringRegExp($sOutput, "Offset\s*:\s*(\d+)\s*KB", 1)
    If Not @error Then
        Return Number($aMatches[0]) * 2 ; Convert KB to sectors (512B)
    EndIf
    
    Return 0 ; M·∫∑c ƒë·ªãnh sector 0 n·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c
EndFunc

; --- C√°c h√†m v·ªÅ giao di·ªán v√† hi·ªáu ·ª©ng ---

Func _AnimateGUI($sDirection)
    If $g_bIsAnimating Then Return
    $g_bIsAnimating = True

    Local $iSteps = 15
    Local $aCurrentPos = WinGetPos($g_hGUI)
	Local $iTotalButtons = UBound($g_aButtons_All)

    If $sDirection = "shrink" Then
		$g_bIsShrunken = True
		GUICtrlSetState($hTitleBar, $GUI_HIDE)
		GUICtrlSetState($hTitleText, $GUI_HIDE)
		GUICtrlSetState($g_hScrollUp, $GUI_HIDE)
		GUICtrlSetState($g_hScrollDown, $GUI_HIDE)
		GUICtrlSetState($g_hFooterLabel, $GUI_HIDE)
		_UpdateVisibleButtons(True) ; ·∫®n t·∫•t c·∫£ n√∫t

		For $i = 1 To $iSteps
			Local $iNewHeight = $g_iMainHeight - (($g_iMainHeight - $g_iShrinkSize) * ($i / $iSteps))
			Local $iNewWidth = $g_iMainWidth - (($g_iMainWidth - $g_iShrinkSize) * ($i / $iSteps))
			WinMove($g_hGUI, "", -1, -1, $iNewWidth, $iNewHeight)
			Sleep(10)
		Next
		WinMove($g_hGUI, "", -1, -1, $g_iShrinkSize, $g_iShrinkSize)
		GUICtrlSetState($g_hShrinkLabel, $GUI_SHOW)

    ElseIf $sDirection = "expand" Then
        $g_bIsShrunken = False
		GUICtrlSetState($g_hShrinkLabel, $GUI_HIDE)

		For $i = 1 To $iSteps
			Local $iNewHeight = $g_iShrinkSize + (($g_iMainHeight - $g_iShrinkSize) * ($i / $iSteps))
			Local $iNewWidth = $g_iShrinkSize + (($g_iMainWidth - $g_iShrinkSize) * ($i / $iSteps))
			WinMove($g_hGUI, "", -1, -1, $iNewWidth, $iNewHeight)
			Sleep(10)
		Next
		WinMove($g_hGUI, "", -1, -1, $g_iMainWidth, $g_iMainHeight)
		GUICtrlSetState($hTitleBar, $GUI_SHOW)
		GUICtrlSetState($hTitleText, $GUI_SHOW)
		If $iTotalButtons > $g_iMaxButtonsVisible Then
			GUICtrlSetState($g_hFooterLabel, $GUI_SHOW)
			GUICtrlSetState($g_hScrollUp, $GUI_SHOW)
			GUICtrlSetState($g_hScrollDown, $GUI_SHOW)
		EndIf
		_UpdateVisibleButtons()
    EndIf

    $g_bIsAnimating = False
EndFunc

Func _InitialShrink()
    AdlibUnRegister("_InitialShrink")
    If Not $g_bIsShrunken And Not $g_bMouseOver Then
        _AnimateGUI("shrink")
    EndIf
EndFunc

; --- C√°c h√†m k√©o th·∫£ c·ª≠a s·ªï ---

Func _WM_LBUTTONDOWN($hWnd, $iMsg, $wParam, $lParam)
    If $hWnd <> $g_hGUI Then Return $GUI_RUNDEFMSG

    Local $hCtrl = GUICtrlGetHandle(GUIGetMsg(1)[1])
    If $hCtrl = $hTitleBar Or $hCtrl = $hTitleText Or $hCtrl = $g_hShrinkLabel Then
        _StartDrag()
    EndIf
    Return $GUI_RUNDEFMSG
EndFunc

Func _WM_LBUTTONUP($hWnd, $iMsg, $wParam, $lParam)
    _StopDrag()
    Return $GUI_RUNDEFMSG
EndFunc

Func _StartDrag()
    Local $aWinPos = WinGetPos($g_hGUI)
    Local $aMousePos = MouseGetPos()
    $g_iDragOffsetX = $aMousePos[0] - $aWinPos[0]
    $g_iDragOffsetY = $aMousePos[1] - $aWinPos[1]
    $g_bDragging = True
EndFunc

Func _StopDrag()
    $g_bDragging = False
EndFunc

; --- H·ªá th·ªëng cu·ªôn m·ªõi ---
Func _Scroll($iDirection)
    Local $iTotalButtons = UBound($g_aButtons_All)
    Local $iNewOffset = $g_iScrollOffset + ($iDirection * 1)

    ; Gi·ªõi h·∫°n cu·ªôn
    If $iNewOffset < 0 Then $iNewOffset = 0
    If $iNewOffset > $iTotalButtons - $g_iMaxButtonsVisible Then $iNewOffset = $iTotalButtons - $g_iMaxButtonsVisible

    $g_iScrollOffset = $iNewOffset
    _UpdateVisibleButtons()
EndFunc

Func _UpdateVisibleButtons($bHideAll = False)
    Local $iTotalButtons = UBound($g_aButtons_All) ; Use UBound directly
    ConsoleWrite("Total buttons: " & $iTotalButtons & ", ScrollOffset: " & $g_iScrollOffset & @CRLF)

    For $i = 0 To $iTotalButtons - 1
        If $bHideAll Or $i < $g_iScrollOffset Or $i >= ($g_iScrollOffset + $g_iMaxButtonsVisible) Then
            GUICtrlSetState($g_aButtons_All[$i][0], $GUI_HIDE)
            ConsoleWrite("Button " & $i & " (" & $g_aButtons_All[$i][1] & ") set to HIDE" & @CRLF)
        Else
            Local $yPos = $g_iTitleHeight + (($i - $g_iScrollOffset) * $g_iButtonHeight)
            GUICtrlSetPos($g_aButtons_All[$i][0], -1, $yPos)
            GUICtrlSetState($g_aButtons_All[$i][0], $GUI_SHOW)
            ConsoleWrite("Button " & $i & " (" & $g_aButtons_All[$i][1] & ") set to SHOW at yPos: " & $yPos & @CRLF)
        EndIf
    Next

    ; Ensure scroll buttons are shown/hidden correctly
    If IsHWnd($g_hScrollUp) And IsHWnd($g_hScrollDown) And Not $bHideAll Then
        If $iTotalButtons > $g_iMaxButtonsVisible Then
            If $g_iScrollOffset > 0 Then
                GUICtrlSetState($g_hScrollUp, $GUI_SHOW)
                ConsoleWrite("ScrollUp button set to SHOW" & @CRLF)
            Else
                GUICtrlSetState($g_hScrollUp, $GUI_HIDE)
                ConsoleWrite("ScrollUp button set to HIDE" & @CRLF)
            EndIf

            If $g_iScrollOffset + $g_iMaxButtonsVisible < $iTotalButtons Then
                GUICtrlSetState($g_hScrollDown, $GUI_SHOW)
                ConsoleWrite("ScrollDown button set to SHOW" & @CRLF)
            Else
                GUICtrlSetState($g_hScrollDown, $GUI_HIDE)
                ConsoleWrite("ScrollDown button set to HIDE" & @CRLF)
            EndIf
        Else
            GUICtrlSetState($g_hScrollUp, $GUI_HIDE)
            GUICtrlSetState($g_hScrollDown, $GUI_HIDE)
            ConsoleWrite("Scroll buttons hidden (not enough buttons)" & @CRLF)
        EndIf
    Else
        ConsoleWrite("Scroll buttons not created or hidden due to bHideAll" & @CRLF)
    EndIf

    If IsHWnd($g_hFooterLabel) And Not $bHideAll Then
        If $iTotalButtons > $g_iMaxButtonsVisible Then
            GUICtrlSetState($g_hFooterLabel, $GUI_SHOW)
            ConsoleWrite("Footer label set to SHOW" & @CRLF)
        Else
            GUICtrlSetState($g_hFooterLabel, $GUI_HIDE)
            ConsoleWrite("Footer label set to HIDE" & @CRLF)
        EndIf
    EndIf
EndFunc